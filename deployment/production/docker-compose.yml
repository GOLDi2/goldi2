version: "3"

# docker plugin install grafana/loki-docker-driver:2.8.2 --alias loki --grant-all-permissions

x-loki: &loki-logging
  driver: loki
  options:
    loki-url: http://127.0.0.1:${LOKI_PORT}/loki/api/v1/push
    loki-external-labels: project=crosslab
    loki-pipeline-stages: |
      - regex:
          expression: '"(level)":"(?P<level>\w+)"'
      - labels:
          level:
    loki-relabel-config: |
      - action: labelmap
        regex: compose_(service)
      - action: labelkeep
        regex: (service|project)
    labels: level,service
  
x-config: &common-config
  AUTHORIZATION_SERVER: "http://authorization:3010"
  AUTHORIZATION_PSK: "${AUTHORIZATION_PSK}"
  LOGGING: "${LOGGING}"
  BASE_URL: https://api.${DOMAIN}
  DB_TYPE: mariadb
  DB_HOST: db
  DB_PORT: 3306

networks:
  db:
  loki:
  global_default:
    external: true

volumes:
  loki:
  db:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./data

services:
  # Databases
  db:
    image: mariadb
    networks:
      db:
    volumes:
      - "./config/mariadb:/docker-entrypoint-initdb.d"
      - "db:/var/lib/mysql"
    environment:
      MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--su=mysql", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    logging: *loki-logging
  # Logging
  loki:
    image: grafana/loki:2.8.3
    command: -config.file=/loki.yaml
    volumes:
      - ./config/loki/loki.yaml:/loki.yaml
    networks:
      loki:
    ports:
      - "127.0.0.1:${LOKI_PORT}:3100"
  grafana:
    environment:
      VIRTUAL_HOST: logs.${DOMAIN}
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: logs.${DOMAIN}
      SERVER_NAME: logs.${DOMAIN}
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SERVER_HTTP_PORT: 80
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: /var/lib/grafana/dashboards/dashboard.json
      GF_USERS_DEFAULT_THEME: light
    volumes:
      - ./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/ds.yaml
      - ./config/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    image: grafana/grafana:latest
    networks:
      loki:
      global_default:
  # Services
  gateway:
    image: gateway-service:latest
    environment:
      <<: *common-config
      VIRTUAL_HOST: api.${DOMAIN}
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: api.${DOMAIN}
      SERVER_NAME: api.${DOMAIN}
      AUTH_SERVICE_URL: "authentication:3000"
      DEVICE_SERVICE_URL: "device:3001"
      EXPERIMENT_SERVICE_URL: "experiment:3002"
      FEDERATION_SERVICE_URL: "federation:3003"
    networks:
      loki:
      global_default:
    logging: *loki-logging
    restart: on-failure
  authentication:
    image: auth-service:latest
    environment:
      <<: *common-config
      DB_USERNAME: authentication
      DB_DATABASE: authentication
      JWT_SECRET: ${JWT_SECRET}
    networks:
      loki:
      global_default:
      db:
    logging: *loki-logging
    restart: on-failure
  authorization:
    image: authorization-service:latest
    environment:
      <<: *common-config
      JWT_SECRET: ${JWT_SECRET}
    networks:
      loki:
      global_default:
      db:
    logging: *loki-logging
    restart: on-failure
  device:
    image: device-service:latest
    environment: *common-config
    networks:
      loki:
      global_default:
      db:
    logging: *loki-logging
    restart: on-failure
  experiment:
    image: experiment-service:latest
    environment: *common-config
    networks:
      loki:
      global_default:
      db:
    logging: *loki-logging
    restart: on-failure
  federation:
    image: federation-service:latest
    environment:
      <<: *common-config
      DB_USERNAME: federation
      DB_NAME: federation
      SECURITY_ISSUER: https://${DOMAIN}
      SECURITY_AUDIENCE: https://${DOMAIN}
      JWKS_URL: https://api.${DOMAIN}/.well-known/jwks.json
      API_TOKEN: ${FEDERATION_API_KEY}
    networks:
      loki:
      global_default:
      db:
    logging: *loki-logging
    restart: on-failure
  lti:
    image: lti-service:latest
    environment:
      <<: *common-config
      DB_USERNAME: lti
      DB_NAME: lti
      SECURITY_ISSUER: https://${DOMAIN}
      SECURITY_AUDIENCE: https://${DOMAIN}
      JWKS_URL: https://api.${DOMAIN}/.well-known/jwks.json
      API_TOKEN: ${FEDERATION_API_KEY}
      BASE_URL: https://lti.${DOMAIN}
      VIRTUAL_HOST: lti.${DOMAIN}
      VIRTUAL_PORT: 8080
      VIRTUAL_PATH: /
      LETSENCRYPT_HOST: lti.${DOMAIN}
      COOKIE_SECRET: ${COOKIE_SECRET}
    networks:
      loki:
      global_default:
      db:
    logging: *loki-logging
    restart: on-failure

# Frontend ########################################################################################
  frontend:
    image: frontend:latest
    environment:
      - GOLDI_API_URL=https://api.${DOMAIN}
      - VIRTUAL_HOST=www.${DOMAIN}
      - VIRTUAL_PORT=8080
      - VIRTUAL_PATH=/
      - LETSENCRYPT_HOST=www.${DOMAIN}
    networks:
      global_default:
    restart: on-failure
    logging: *loki-logging

  # esp:
  #   image: esp:latest
  #   environment:
  #     - VIRTUAL_HOST=www.${DOMAIN}
  #     - VIRTUAL_PORT=80
  #     - VIRTUAL_PATH=/esp
  #     - VIRTUAL_DEST=/
  #     - LETSENCRYPT_HOST=www.${DOMAIN}
  #   networks:
  #     global_default:
  #   restart: on-failure
  #   logging: *loki-logging

  ecp:
    image: ecp:latest
    environment:
      - VIRTUAL_HOST=www.${DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PATH=/ecp
      - VIRTUAL_DEST=/
      - LETSENCRYPT_HOST=www.${DOMAIN}
    networks:
      global_default:
    restart: on-failure
    logging: *loki-logging
  
  gift:
    image: goldi2/gift:latest
    environment:
      - VIRTUAL_HOST=www.${DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PATH=/gift
      - VIRTUAL_DEST=/
      - LETSENCRYPT_HOST=www.${DOMAIN}
    networks:
      global_default:
    restart: on-failure
    logging: *loki-logging

  sane:
    image: goldi2/sane:latest
    environment:
      - VIRTUAL_HOST=www.${DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PATH=/SANE
      - VIRTUAL_DEST=/
      - LETSENCRYPT_HOST=www.${DOMAIN}
      - BASE_PATH=/SANE/
    networks:
      global_default:
    restart: on-failure
    logging: *loki-logging

  beast:
    image: goldi2/beast:latest
    environment:
      - VIRTUAL_HOST=www.${DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PATH=/BEAST
      - VIRTUAL_DEST=/
      - LETSENCRYPT_HOST=www.${DOMAIN}
    networks:
      global_default:
    restart: on-failure
    logging: *loki-logging

  wide-server:
    image: goldi2/wide-server:latest
    environment:
      - VIRTUAL_HOST=www.${DOMAIN}
      - VIRTUAL_PORT=8080
      - VIRTUAL_PATH=/wide/
      - VIRTUAL_DEST=/
      - LETSENCRYPT_HOST=www.${DOMAIN}
    networks:
      global_default:
    restart: on-failure
    logging: *loki-logging
