{"version":3,"file":"model.js","sourceRoot":"","sources":["model.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Created by Dario Götze on 09.05.2017.\r\n */\r\n\r\n/**\r\n * Controller for persistence handling\r\n */\r\nclass PersistenceController\r\n{\r\n    /**\r\n     * Key for the dirty value of the project\r\n     * @type {string}\r\n     */\r\n    public static readonly SESSION_DIRTY_KEY : string    = 'beast.dirty';\r\n    /**\r\n     * Project prefix for saved projects\r\n     * @type {string}\r\n     */\r\n    public static readonly LOCAL_PROJECT_PREFIX : string = 'beast.project.';\r\n    \r\n    /**\r\n     * Project-key for sessionStorage\r\n     * @type {string}\r\n     */\r\n    public static readonly LOCAL_LAST_PROJECT_KEY : string = 'beast.lastProject';\r\n    \r\n    /**\r\n     * Key for the localStorage which includes all saved projectnames\r\n     * @type {string}\r\n     */\r\n    public static readonly LOCAL_PROJECT_LIST_KEY : string = 'beast.projectList';\r\n    \r\n    /**\r\n     * Key to prevent multiple instances of BEAST\r\n     * @type {string}\r\n     */\r\n    public static readonly LOCAL_SESSION_LOCK_KEY : string = 'beast.session-lock';\r\n    \r\n    private currentProject : Project;\r\n    \r\n    private dirty : boolean;\r\n    \r\n    private controller : BeastController;\r\n\r\n    private localStoragePrefix: string;\r\n    private get session_dirty_key() : string { return this.localStoragePrefix + \"-\" + PersistenceController.SESSION_DIRTY_KEY }\r\n    private get local_project_prefix() : string { return PersistenceController.LOCAL_PROJECT_PREFIX }\r\n    private get local_last_project_key() : string { return this.localStoragePrefix + \"-\" + PersistenceController.LOCAL_LAST_PROJECT_KEY }\r\n    private get local_project_list_key() : string { return PersistenceController.LOCAL_PROJECT_LIST_KEY }\r\n    private get local_session_lock_key() : string { return this.localStoragePrefix + \"-\" + PersistenceController.LOCAL_SESSION_LOCK_KEY }\r\n\r\n    /**\r\n     * Creates a new PersistenceController\r\n     * @param controller the corresponding Beast Controller instance\r\n     * @param localStoragePrefix a prefix to project-related keys in the local storage\r\n     */\r\n    constructor(controller : BeastController, localStoragePrefix: string = \"\")\r\n        {\r\n            this.controller = controller;\r\n            this.localStoragePrefix = localStoragePrefix;\r\n            this.dirty      = false;\r\n            if (localStorage.getItem(this.local_session_lock_key) === null)\r\n            {\r\n                localStorage.setItem(this.local_session_lock_key, '');\r\n                this.currentProject = this.getLastSessionProject();\r\n                window.addEventListener('beforeunload', () =>\r\n                {\r\n                    this.saveSessionProject();\r\n                });\r\n            }\r\n            else\r\n            {\r\n                this.currentProject = new Project();\r\n                new InvalidSessionDialog(() =>\r\n                                         {\r\n                                             this.setCurrentProject(this.getLastSessionProject());\r\n                                             window.addEventListener('beforeunload', () =>\r\n                                             {\r\n                                                 this.saveSessionProject();\r\n                                             });\r\n                                         }).show();\r\n            }\r\n        }\r\n    \r\n    /**\r\n     * Indicates if the model data was saved locally\r\n     * @returns {boolean} true, if the model is dirty\r\n     */\r\n    isDirty() : boolean\r\n        {\r\n            return this.dirty;\r\n        }\r\n    \r\n    /**\r\n     * Marks a change of model data and calls the BeastController\r\n     */\r\n    markDirty() : void\r\n        {\r\n            this.dirty = true;\r\n            this.controller.modelChanged();\r\n        }\r\n    \r\n    /**\r\n     * Saves the current project to the sessionStorage\r\n     */\r\n    private saveSessionProject() : void\r\n        {\r\n            const data : string = JSON.stringify(this.currentProject);\r\n            sessionStorage.setItem(this.local_last_project_key, data);\r\n            sessionStorage.setItem(this.session_dirty_key, JSON.stringify(this.dirty));\r\n            if (this.dirty)\r\n            {\r\n                localStorage.setItem(this.local_last_project_key, data);\r\n            }\r\n            localStorage.removeItem(this.local_session_lock_key);\r\n        }\r\n    \r\n    /**\r\n     * Loads the saved project from the sessionStorage\r\n     * @returns {Project} the loaded project or a new project if none exists\r\n     */\r\n    private getLastSessionProject() : Project\r\n        {\r\n            let data = sessionStorage.getItem(this.local_last_project_key);\r\n            if (data === null)\r\n            {\r\n                data = localStorage.getItem(this.local_last_project_key);\r\n            }\r\n            localStorage.removeItem(this.local_last_project_key);\r\n            if (data === null)\r\n            {\r\n                return new Project();\r\n            }\r\n            else\r\n            {\r\n                const dirtyMarker : string = sessionStorage.getItem(this.session_dirty_key);\r\n                if (dirtyMarker === null)\r\n                {\r\n                    InfoDialog.showDialog('You didn\\'t save your last session!');\r\n                    this.dirty = true;\r\n                }\r\n                else\r\n                {\r\n                    this.dirty = JSON.parse(dirtyMarker);\r\n                }\r\n                return this.loadProjectFromJSON(data);\r\n            }\r\n        }\r\n    \r\n    /**\r\n     * Downloads the given data as local file\r\n     * @param fileName name for the downloaded file\r\n     * @param data Data to download\r\n     */\r\n    static downloadAsFile(fileName : string, data : Project | Library) : void\r\n        {\r\n            const a    = document.createElement('a');\r\n            const blob = new Blob([JSON.stringify(data, null, 4)], {type : 'application/json'}),\r\n                  url  = window.URL.createObjectURL(blob);\r\n            document.body.appendChild(a);\r\n            a.href     = url;\r\n            a.download = fileName;\r\n            a.click();\r\n            window.URL.revokeObjectURL(url);\r\n        }\r\n    \r\n    /**\r\n     * Download the current project as a file with current project name and file extension .beast\r\n     */\r\n    downloadCurrentProject() : void\r\n        {\r\n            PersistenceController.downloadAsFile(this.currentProject.getName() + '.beast', this.currentProject);\r\n            this.dirty = false;\r\n        }\r\n    \r\n    /**\r\n     * Compares the property keys of both objects\r\n     * @param obj1 object one\r\n     * @param obj2 object two\r\n     * @returns {boolean} true, if both objects contains the same property keys in the same order\r\n     */\r\n    static comparePropertyKeys(obj1 : any, obj2 : any) : boolean\r\n        {\r\n            return Object.keys(obj1)\r\n                         .sort()\r\n                         .toString() === Object.keys(obj2)\r\n                                               .sort()\r\n                                               .toString();\r\n        }\r\n    \r\n    /**\r\n     * Rebuilds the given property with its correct prototype. (Is used for JSON.parse())\r\n     * @param key property key\r\n     * @param value property value\r\n     * @returns {object} the correct property\r\n     */\r\n    reviver(key : string, value : any) : object\r\n        {\r\n            switch (key)\r\n            {\r\n                case 'libraries':\r\n                    value.forEach((value, index, arr) =>\r\n                                  {\r\n                                      arr[index] = new Library(value.ID, value.name, value.version, value.components);\r\n                                  });\r\n                    break;\r\n                case 'components':\r\n                    value.forEach((value, index, arr) =>\r\n                                  {\r\n                                      arr[index] = new CompoundComponent(value.ID, value.name, value.devices, value.connectors);\r\n                                  });\r\n                    break;\r\n                case 'devices':\r\n                    value.forEach((value, index, arr) =>\r\n                                  {\r\n                                      arr[index] = new ComponentInstance(value.name, new GlobalComponentTypeID(value.type.libraryID, value.type.componentID), value.id, value.x, value.y, value.rotation, value.state);\r\n                                      delete value.name, value.type, value.id, value.x, value.y, value.rotation, value.state;\r\n                                      Object.assign(arr[index], value);\r\n                                  });\r\n                    break;\r\n                case 'connectors':\r\n                    value.forEach((value, index, arr) =>\r\n                                  {\r\n                                      arr[index] = new Connector(value.from, value.to);\r\n                                  });\r\n                    break;\r\n                case 'circuit':\r\n                    return new CompoundComponent(value.ID, value.name, value.devices, value.connectors);\r\n                default :\r\n                    break;\r\n            }\r\n            return value;\r\n        }\r\n    \r\n    /**\r\n     * Loads the project from given file\r\n     * @param file File to load\r\n     * @param callback Function which is called after loading\r\n     */\r\n    loadProjectFromFile(file : File, callback : (loadedProject : Project) => void) : void\r\n        {\r\n            PersistenceController.createFileReader(file, (data : string) =>\r\n            {\r\n                callback(this.loadProjectFromJSON(data));\r\n            });\r\n        }\r\n    \r\n    /**\r\n     * Loads the library from given file\r\n     * @param file File to load\r\n     * @param callback Function which is called after loading\r\n     */\r\n    loadLibraryFromFile(file : File, callback : (loadedProject : Library) => void) : void\r\n        {\r\n            PersistenceController.createFileReader(file, (data : string) =>\r\n            {\r\n                callback(this.loadLibraryFromJSON(data));\r\n            });\r\n        }\r\n    \r\n    /**\r\n     * Converts a JSON string into a project\r\n     * @param json JSON string\r\n     * @returns {Project} the project\r\n     */\r\n    loadProjectFromJSON(json : string) : Project\r\n        {\r\n            try\r\n            {\r\n                const project : Project = new Project();\r\n                const data              = JSON.parse(json, this.reviver);\r\n                if (PersistenceController.comparePropertyKeys(project, data))\r\n                {\r\n                    project.circuit   = data.circuit;\r\n                    project.libraries = data.libraries;\r\n                    project.version   = data.version;\r\n                    return project;\r\n                }\r\n                return null;\r\n            }\r\n            catch (err)\r\n            {\r\n                console.log(err.message);\r\n                return null;\r\n            }\r\n        }\r\n    \r\n    /**\r\n     * Converts a JSON string into a library\r\n     * @param json JSON string\r\n     * @returns {Library} the library\r\n     */\r\n    loadLibraryFromJSON(json : string) : Library\r\n        {\r\n            try\r\n            {\r\n                const lib : Library = new Library(''); //key left empty intentionally\r\n                const data          = JSON.parse(json, this.reviver);\r\n                if (PersistenceController.comparePropertyKeys(lib, data))\r\n                {\r\n                    lib.ID         = data.ID;\r\n                    lib.name       = data.name;\r\n                    lib.components = data.components;\r\n                    lib.version    = data.version;\r\n                    return lib;\r\n                }\r\n                return null;\r\n            }\r\n            catch (err)\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n    \r\n    /**\r\n     * Loads a static Library from the server\r\n     * @param path Path from which is loaded\r\n     * @returns {Library} the library\r\n     */\r\n    loadStaticLibrary(path : string, callback : Function)\r\n        {\r\n            jQuery.ajax({\r\n                            url     : path,\r\n                            success : (result) =>\r\n                            {\r\n                                callback(this.loadLibraryFromJSON(result));\r\n                            },\r\n                            error : function(result){\r\n                                console.log(result);\r\n                            },\r\n                            async   : true\r\n                        });\r\n        }\r\n    \r\n    /**\r\n     * Loads the data from given file\r\n     * @param file File to load\r\n     * @param dataCallback Function which is called after loading with the loaded data\r\n     */\r\n    static createFileReader(file : File, dataCallback : (data : string) => void) : void\r\n        {\r\n            const reader : FileReader = new FileReader();\r\n            reader.onload             = (evt : any) =>\r\n            {\r\n                try\r\n                {\r\n                    dataCallback(evt.target.result);\r\n                }\r\n                catch (exception)\r\n                {\r\n                    dataCallback('');\r\n                }\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n    \r\n    /**\r\n     * Saves the current project into the localStorage and overrides existing one\r\n     */\r\n    saveCurrentProjectInLocalStorage() : void\r\n        {\r\n            const list : string[] = this.getProjects();\r\n            const name            = this.currentProject.getName();\r\n            if (list.indexOf(name) == -1)\r\n            {\r\n                list.push(name);\r\n            }\r\n            localStorage.setItem(this.local_project_list_key, JSON.stringify(list));\r\n            localStorage.setItem(this.local_project_prefix + name, JSON.stringify(this.currentProject));\r\n            this.dirty = false;\r\n        }\r\n    \r\n    /**\r\n     * Creates a new project and set it as current project\r\n     */\r\n    public createNewProject(projectModifier?: (project: Project)=>(void)) : void\r\n        {\r\n            const project = new Project();\r\n            if (projectModifier) projectModifier(project);\r\n            this.setCurrentProject(project);\r\n        };\r\n    \r\n    /**\r\n     * Sets the current project\r\n     * @param project Project which is to be set\r\n     */\r\n    setCurrentProject(project : Project) : void\r\n        {\r\n            this.currentProject = project;\r\n            this.dirty          = false;\r\n            this.controller.projectChanged();\r\n        }\r\n    \r\n    /**\r\n     * @returns {Project} the current project\r\n     */\r\n    getCurrentProject() : Project\r\n        {\r\n            return this.currentProject;\r\n        }\r\n    \r\n    /**\r\n     * Deletes the given project from localStorage\r\n     * @param name Name of the project\r\n     */\r\n    deleteLocalProject(name : string) : void\r\n        {\r\n            const arr : string[] = this.getProjects();\r\n            const idx : number   = arr.indexOf(name);\r\n            if (idx > -1)\r\n            {\r\n                arr.splice(idx, 1);\r\n                localStorage.setItem(this.local_project_list_key, JSON.stringify(arr));\r\n                localStorage.removeItem(this.local_project_prefix + name);\r\n            }\r\n        }\r\n    \r\n    /**\r\n     * @returns {Array} Array with the names of the projects in the localStorage\r\n     */\r\n    getProjects() : string[]\r\n        {\r\n            const data : string = localStorage.getItem(this.local_project_list_key);\r\n            return data === null ? [] : JSON.parse(data);\r\n        }\r\n    \r\n    /**\r\n     * Loads a project from the localStorage\r\n     * @param name Name of the project to be load\r\n     */\r\n    loadProject(name : string) : void\r\n        {\r\n            this.setCurrentProject(this.loadProjectFromJSON(localStorage.getItem(this.local_project_prefix + name)));\r\n        }\r\n    \r\n    /**\r\n     * @returns {Library[]} all custom libraries from the current project\r\n     */\r\n    getLibraries() : Library[]\r\n        {\r\n            return this.getCurrentProject().libraries;\r\n        }\r\n    \r\n    /**\r\n     * Uses random number to generate a human-readable component id.\r\n     * Minute chance of collisions remains\r\n     * @param name - name of the component the id is to be used for\r\n     * @returns {string}\r\n     */\r\n    static generateComponentId(name : string) : string\r\n        {\r\n            return name + '-' + (Math.random() * 0xFFFFFFFF << 0).toString(16);\r\n        }\r\n}\r\n\r\n/**\r\n * Component\r\n */\r\nabstract class Component\r\n{\r\n    /**\r\n     * name\r\n     */\r\n    name : string;\r\n    /**\r\n     * The local component ID (unique inside a library)\r\n     */\r\n    readonly ID : string;\r\n    \r\n    /**\r\n     *\r\n     * @param id local identifier of the component\r\n     * @param name component name\r\n     */\r\n    constructor(id : string, name : string)\r\n        {\r\n            this.ID   = id;\r\n            this.name = name;\r\n        }\r\n    \r\n    /**\r\n     * returns true if the specified component (type) is a basic component\r\n     * @param component\r\n     * @returns {boolean}\r\n     */\r\n    static isBasic(component : any) : component is BasicComponent\r\n        {\r\n            return component.factory != null;\r\n        }\r\n    \r\n    /**\r\n     * returns true if the specified component (type) is a compound component\r\n     * @param component\r\n     * @returns {boolean}\r\n     */\r\n    static isCompound(component : any) : component is CompoundComponent\r\n        {\r\n            return component.devices != null && component.connectors != null;\r\n        }\r\n    \r\n}\r\n\r\nclass BasicComponent extends Component\r\n{\r\n    /**\r\n     * The factory to create the Component, and define drawing functions etc.\r\n     */\r\n    factory : any;\r\n    \r\n    constructor(id : string, name : string, factory = null)\r\n        {\r\n            super(id, name);\r\n            this.factory = factory;\r\n        }\r\n}\r\n\r\nclass CompoundComponent extends Component\r\n{\r\n    /**\r\n     * Contains instances of other components\r\n     */\r\n    readonly devices : ComponentInstance[];\r\n    /**\r\n     * connectors\r\n     */\r\n    readonly connectors : Connector[];\r\n    \r\n    constructor(id : string, name : string, devices : ComponentInstance[],\r\n                connectors : Connector[])\r\n        {\r\n            super(id, name);\r\n            this.devices    = devices;\r\n            this.connectors = connectors;\r\n        }\r\n    \r\n    public copy() : CompoundComponent\r\n        {\r\n            //deep copy of device list and the instance objects are needed to prevent\r\n            //instances to be bound to multiple components\r\n            //FIXME bug sometimes Object instances are passed to this that miss the\r\n            //CompoundComponent prototype, therefor we construct a new Object as workaround\r\n            let copyDevices : Array<ComponentInstance> = [];\r\n            for (let dev of this.devices)\r\n            {\r\n                let newDev : ComponentInstance;\r\n                if (dev instanceof ComponentInstance)\r\n                {\r\n                    newDev = dev.copy();\r\n                }\r\n                else if (dev instanceof Object)\r\n                {\r\n                    newDev = Object.assign(new ComponentInstance('', null, '', 0, 0), dev);\r\n                    newDev = dev;\r\n                }\r\n                copyDevices.push(newDev);\r\n            }\r\n            let copyConnectors : Array<Connector> = [];\r\n            for (let conn of this.connectors)\r\n            {\r\n                let newConn : Connector;\r\n                if (conn instanceof Connector)\r\n                {\r\n                    newConn = conn.copy();\r\n                }\r\n                else if (conn instanceof Object)\r\n                {\r\n                    newConn = Object.assign(new Connector('', ''), conn);\r\n                }\r\n                copyConnectors.push(newConn);\r\n            }\r\n            return new CompoundComponent(this.ID, this.name, copyDevices, copyConnectors);\r\n        }\r\n    \r\n    public listAllDependencies(controller : BeastController) : GlobalComponentTypeID[]\r\n        {\r\n            let dependencies = new Set<GlobalComponentTypeID>();\r\n            for (let d of this.devices)\r\n            {\r\n                let typeID : GlobalComponentTypeID = d.type;\r\n                dependencies.add(typeID);\r\n                if (Component.isBasic(controller.resolveComponentType(typeID)))\r\n                {\r\n                    continue;\r\n                }\r\n                //for compounds also add their dependencies\r\n                let type : CompoundComponent = <CompoundComponent> controller.resolveComponentType(typeID);\r\n                //recursion happens here\r\n                let rDeps                    = type.listAllDependencies(controller);\r\n                //aggregate results from recursion\r\n                for (let d of rDeps)\r\n                {\r\n                    dependencies.add(d);\r\n                }\r\n            }\r\n            return Array.from(dependencies);\r\n            \r\n        }\r\n    \r\n    /**\r\n     * returns a list of all Compoent Types that depend on\r\n     * the given global Type ID used by this component.\r\n     * @param targetID the type ID to list dependencies for\r\n     * @param controller\r\n     * @returns {GlobalComponentTypeID[]}\r\n     */\r\n    public listDependenciesOn(targetID : GlobalComponentTypeID, controller : BeastController) : GlobalComponentTypeID[]\r\n        {\r\n            let dependencies = Array<GlobalComponentTypeID>();\r\n            if (Component.isCompound(this))\r\n            {\r\n                for (let cInstance of this.devices)\r\n                {\r\n                    let cType = <CompoundComponent> controller.resolveComponentType(cInstance.type);\r\n                    if (cType.directlyDependsOn(targetID))\r\n                    {\r\n                        dependencies.push(cInstance.type);\r\n                        //do not recurse further, components can not recursively contain themselves\r\n                        continue;\r\n                    }\r\n                    let cDependencies = cType.listDependenciesOn(targetID, controller);\r\n                    // if the instance has dependencies, add it to the list of dependencies\r\n                    // and also add it's own dependencies to the list of dependencies\r\n                    if (cDependencies.length != 0)\r\n                    {\r\n                        dependencies = dependencies.concat(cDependencies);\r\n                        dependencies.push(cInstance.type);\r\n                    }\r\n                }\r\n            }\r\n            return dependencies;\r\n        }\r\n    \r\n    /**\r\n     * returns true if the component directly uses components of the specified component type\r\n     * @param targetID the type to check for\r\n     * @returns {boolean}\r\n     */\r\n    public directlyDependsOn(targetID : GlobalComponentTypeID) : boolean\r\n        {\r\n            for (let cInstance of this.devices)\r\n            {\r\n                let t = new GlobalComponentTypeID(cInstance.type.libraryID, cInstance.type.componentID);\r\n                if (t.equals(targetID))\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            //no direct dependencies found\r\n            return false;\r\n        }\r\n}\r\n\r\n/**\r\n * Project\r\n */\r\nclass Project\r\n{\r\n    /**\r\n     * The circuit data of the project\r\n     */\r\n    circuit : CompoundComponent;\r\n    /**\r\n     * BEAST version at project creation\r\n     */\r\n    version : string;\r\n    /**\r\n     * libraries\r\n     */\r\n    libraries : Library[];\r\n    \r\n    /**\r\n     * @param name Project name, 'New Project' if empty\r\n     */\r\n    constructor(name : string = 'New Project')\r\n        {\r\n            this.circuit   = new CompoundComponent('project', name, [], []);\r\n            this.version   = BeastController.BEAST_VERSION;\r\n            this.libraries = [];\r\n        }\r\n    \r\n    getName() : string\r\n        {\r\n            return this.circuit.name;\r\n        }\r\n    \r\n    setName(name : string) : void\r\n        {\r\n            this.circuit.name = name;\r\n        }\r\n    \r\n    /**\r\n     * Adds the specified Library to the Project without any checks.\r\n     * @param lib\r\n     */\r\n    public pushLibrary(lib : Library)\r\n        {\r\n            this.libraries.push(lib);\r\n        }\r\n}\r\n/**\r\n * Library\r\n */\r\nclass Library\r\n{\r\n    /**\r\n     * BEAST version at library creation\r\n     */\r\n    version : string;\r\n    /**\r\n     * library name\r\n     */\r\n    name : string;\r\n    /**\r\n     * Project wide library ID, unique inside a project\r\n     */\r\n    ID : string;\r\n    /**\r\n     * saved devices\r\n     */\r\n    components : Component[];\r\n    \r\n    /**\r\n     * Creates an empty Library\r\n     */\r\n    constructor(id : string, name : string = '', version : string = BeastController.BEAST_VERSION, components : Component[] = [])\r\n        {\r\n            this.ID         = id;\r\n            this.name       = name;\r\n            this.version    = version;\r\n            this.components = components;\r\n        }\r\n    \r\n    /**\r\n     * Removes the specified component with the specified id from the library\r\n     * without dependency checks. Does not modify the Library if the component\r\n     * was not found.\r\n     *\r\n     * @param component\r\n     */\r\n    public removeComponent(component : Component) : void\r\n        {\r\n            arrayRemoveElementOnce(this.components, component);\r\n        }\r\n    \r\n    /**\r\n     * Adds the specified component to the library without any checks.\r\n     * @param component\r\n     */\r\n    public addComponent(component : Component) : void\r\n        {\r\n            //FIXME check for duplicates\r\n            this.components.push(component);\r\n        }\r\n}\r\n/**\r\n * Connector\r\n */\r\nclass Connector\r\n{\r\n    private from : string;\r\n    private to : string;\r\n    \r\n    /**\r\n     * @param from start device port\r\n     * @param to end device port\r\n     */\r\n    constructor(from : string, to : string)\r\n        {\r\n            this.from = from;\r\n            this.to   = to;\r\n        }\r\n    \r\n    public copy() : Connector\r\n        {\r\n            return new Connector(this.from, this.to);\r\n        }\r\n}\r\n\r\n/**\r\n * ComponentInstance\r\n */\r\nclass ComponentInstance\r\n{\r\n    /**\r\n     * name of the responding component\r\n     */\r\n    label : string;\r\n    /**\r\n     * name of the responding library\r\n     */\r\n    type : GlobalComponentTypeID;\r\n    /**\r\n     * unique device id\r\n     */\r\n    id : string;\r\n    /**\r\n     * x position\r\n     */\r\n    x : number;\r\n    /**\r\n     * y position\r\n     */\r\n    y : number;\r\n    /**\r\n     * the device rotation\r\n     */\r\n    rotation : string;\r\n    \r\n    state : {[name : string] : any};\r\n    /**\r\n     * device parameters\r\n     */\r\n    [parameterName : string] : any;\r\n    \r\n    /**\r\n     *\r\n     * @param name ???\r\n     * @param type identifies the component type\r\n     * @param id unique device id\r\n     * @param x x position\r\n     * @param y y position\r\n     * @param rotation the device rotation\r\n     * @param state object that describes the state of the component\r\n     */\r\n    constructor(name : string, type : GlobalComponentTypeID, id : string, x : number, y : number, rotation? : string, state? : {[name : string] : any})\r\n        {\r\n            this.label    = name;\r\n            this.type     = type;\r\n            this.id       = id;\r\n            this.x        = x;\r\n            this.y        = y;\r\n            this.rotation = rotation;\r\n            this.state    = state;\r\n        }\r\n    \r\n    public copy() : ComponentInstance\r\n        {\r\n            return new ComponentInstance(this.label, this.type, this.id, this.x, this.y, this.rotation, this.state);\r\n        }\r\n}\r\n\r\nclass InvalidSessionDialog extends Dialog\r\n{\r\n    private timer;\r\n    private timeText : JQuery;\r\n    private timerID : number;\r\n    private callback : () => void;\r\n    \r\n    constructor(callback : () => void)\r\n        {\r\n            super();\r\n            this.timer    = 20;\r\n            this.callback = callback;\r\n        }\r\n    \r\n    public getTitle() : string\r\n        {\r\n            return 'WARNING!';\r\n        }\r\n    \r\n    public getContent() : JQuery\r\n        {\r\n            this.addButton('Continue anyway', 'glyphicon glyphicon-trash', () =>\r\n            {\r\n                if (this.timerID != null)\r\n                {\r\n                    window.clearInterval(this.timerID);\r\n                }\r\n                localStorage.removeItem(PersistenceController.LOCAL_SESSION_LOCK_KEY);\r\n                this.callback();\r\n                super.close();\r\n            });\r\n            \r\n            this.addButton('Close window', 'glyphicon glyphicon-remove', () => this.close());\r\n            \r\n            const content = $('<div></div>');\r\n            content.append('<p><b>Multiple instances of BEAST are not recommended due to possible data loss!</b></p>');\r\n            content.append('<span>This window is automatically closed in </span>');\r\n            const timeSpan = $('<span style=\"color:red\"></span>');\r\n            this.timeText  = $('<b id=\"close-timer\"></b>');\r\n            timeSpan.append(this.timeText);\r\n            content.append(timeSpan);\r\n            content.append('<span> seconds!</span>');\r\n            this.countdown();\r\n            this.timerID = window.setInterval(() => this.countdown(), 1000);//Every Second\r\n            return content;\r\n        }\r\n    \r\n    private countdown()\r\n        {\r\n            if (this.timer == 0)\r\n            {\r\n                this.close();\r\n            }\r\n            else\r\n            {\r\n                this.timeText.text(this.timer);\r\n                this.timer--;\r\n            }\r\n        }\r\n    \r\n    public close()\r\n        {\r\n            window.close();\r\n        }\r\n}"]}