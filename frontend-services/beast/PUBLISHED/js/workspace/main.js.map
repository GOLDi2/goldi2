{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by maximilian on 18.05.17.\n */\n\n\nnamespace Workspace {\n    export type Circuit = any;\n    export type SubCircuit = Circuit;\n    \n    export type dragMode = \"pan\" | \"select\";\n    export interface Abilities {\n        removeSelected: boolean;\n        editSelectionParameters: boolean;\n        rotateSelection: boolean;\n    }\n    \n    export interface SimcirPort extends SimcirDevice<SimcirDeviceDef> {\n        setExternalManipulation(value: boolean);\n        setManipulationValue(value);\n    }\n    \n    export interface SimcirWorkspace {\n        ui: JQuery,\n        data(): Circuit,\n        selectedData(): SubCircuit,\n        pasteSubcircuit(subcircuit: SubCircuit): void;\n        removeSelected(): void,\n        editSelectionParameters(): void,\n        setShowParameterTooltips(show: boolean): void,\n        setDragMode(pan: boolean);\n        rotateSelection(angle: number);\n        setShowConnectorState(showState: boolean);\n        zoom(relative: boolean, zoomfactor:number);\n        getPorts(): {inports: Array<SimcirPort>, outports: Array<SimcirPort>};\n        selectAll();\n        updatePositions();\n        eventQueue: EventQueue;\n        setPauseTimers(pause: boolean);\n    \n        markDirty: (stateOnly: boolean) => void,\n        openCompound: (identifier: GlobalComponentTypeID) => void\n        selectionChanged: (size: number) => void\n        zoomChanged: (zoomfactor : number) => void,\n    }\n    \n    /**\n     * Specifies the expected controller functions - documentation can be found at the WorkspaceController\n     */\n    export interface WorkspaceControllerInterface{\n        getLibraryComponent(identifier: GlobalComponentTypeID): Circuit;\n        circuitModified(stateOnly: boolean);\n        openCompoundComponent(identifier: GlobalComponentTypeID, workspace: Workspace);\n        updateAbilities?(abilities: Abilities);\n        zoomChanged(zoomfactor : number);\n    }\n    \n    \n    /**\n     *\n     */\n    export class Workspace {\n        protected controller: WorkspaceControllerInterface;\n        protected simulationInterface: SimulationInterface = null;\n        \n        protected simcirWorkspace: SimcirWorkspace;\n    \n        /**\n         * Initializes the Workspace\n         * @param container - The DOM object in with to create the workspace. It has to be connected to the document\n         * @param controller - The workspace controller providing the callbacks specified in WorkspaceControllerInterface\n         * @param circuit - the circuit to be opened in this Workspace\n         */\n        constructor(container : JQuery, controller : WorkspaceControllerInterface, circuit : Circuit)\n            {\n                this.controller = controller;\n            //this.ui = new WorkspaceUI(container);\n            \n            this.simcirWorkspace                  = simcir.createWorkspace(circuit, container, (id: GlobalComponentTypeID) => this.controller.getLibraryComponent(id));\n            this.simcirWorkspace.markDirty        =  (stateOnly?: boolean) => (this.controller.circuitModified(stateOnly));\n            this.simcirWorkspace.openCompound = (identifier : GlobalComponentTypeID) =>\n                    (this.controller.openCompoundComponent(identifier, this));\n            this.simcirWorkspace.selectionChanged = (n) => this.selectionChanged(n);\n            this.simcirWorkspace.zoomChanged = (f) => this.controller.zoomChanged(f);\n            \n            this.selectionChanged(0);\n        }\n    \n        /**\n         * removes the selected devices from the workspace\n         */\n        removeSelection() {\n            this.simcirWorkspace.removeSelected();\n        };\n    \n        /**\n         * opens the parameter editing dialog for the selected device\n         */\n        editSelectionParameters() {\n            this.simcirWorkspace.editSelectionParameters();\n        }\n    \n        /**\n         * Gets the current state of the circuit opened in the workspace.\n         * @returns {Circuit}\n         */\n        getCircuit(): Circuit {\n            return this.simcirWorkspace.data();\n        }\n    \n        /**\n         * Gets the current state of the selected subcircuit.\n         * @returns {SubCircuit}\n         */\n        getSelectedSubcircuit(): SubCircuit {\n            return this.simcirWorkspace.selectedData();\n        }\n    \n        /**\n         * Adds the subcircuit to the current workspace.\n         * @param subcircuit - Subcircuit to be pasted\n         */\n        pasteSubcircuit(subcircuit: SubCircuit) {\n            this.simcirWorkspace.pasteSubcircuit(subcircuit);\n        }\n    \n        /**\n         * Enables or disables the display of parameter tooltips.\n         * @param show\n         */\n        setShowParameterTooltips(show: boolean) {\n            this.simcirWorkspace.setShowParameterTooltips(show)\n        }\n    \n        /**\n         * Sets whether dragging on the workspace background begins a range selection or pans it.\n         * @param mode\n         */\n        setDragMode(mode: dragMode) {\n            this.simcirWorkspace.setDragMode(mode === 'pan');\n        }\n    \n        /**\n         * Sets whether connectors are animated to display their state\n         * @param showState\n         */\n        setShowConnectorState(showState: boolean) {\n            this.simcirWorkspace.setShowConnectorState(showState);\n        }\n    \n        /**\n         * Zooms the workspace relatively to current zoom factor\n         * @param factor\n         */\n        setRelativeZoom(factor: number) {\n            this.simcirWorkspace.zoom(true, factor);\n        }\n    \n        /**\n         * Resets the zoom to the default\n         */\n        resetZoom() {\n            this.simcirWorkspace.zoom(false, 1);\n        }\n    \n        /**\n         * Rotates the selected devices\n         * @param angle - angle of rotation in degree - negative numbers mean left. Is supposed to be a multiple of\n         * 90Â°.\n         */\n        rotateSelection(angle: number) {\n            this.simcirWorkspace.rotateSelection(angle);\n        }\n        \n        getSimulationInterface(): SimulationInterface {\n            if (this.simulationInterface == null)\n                this.simulationInterface = new SimulationInterface(this.simcirWorkspace);\n            return this.simulationInterface\n        }\n        \n        protected selectionChanged(size: number) {\n            if (this.controller.updateAbilities != undefined)\n                this.controller.updateAbilities(\n                    {\n                        rotateSelection: size > 0,\n                        removeSelected: size > 0,\n                        editSelectionParameters: size == 1,\n                    })\n        }\n        \n        selectAll() {\n            this.simcirWorkspace.selectAll();\n        }\n\n        /**\n         * Updates the Label positioning - to be called after adding the workspace to the DOM when the it was\n         * not part of the DOM at time of construction\n         */\n        public updatePositions() {\n            this.simcirWorkspace.updatePositions();\n        }\n    }\n    \n    \n}"]}