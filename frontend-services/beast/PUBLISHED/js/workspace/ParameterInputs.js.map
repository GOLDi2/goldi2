{"version":3,"file":"ParameterInputs.js","sourceRoot":"","sources":["ParameterInputs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by maximilian on 22.05.17.\n */\n\nnamespace workspace {\n    const RGBCOLOR_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i;\n\n    /**\n     * Represents a Parameter input\n     */\n    export abstract class ParameterInput {\n        readonly ui: JQuery;\n        readonly validateFct: (value: any) => boolean;\n\n        protected constructor(ui: JQuery, validateFct: (value: any) => boolean = () => true) {\n            this.ui = ui;\n            this.validateFct = validateFct;\n        }\n\n        /** Is called after the ui of the ParameterInput is attached to the DOM */\n        initInput() {\n        }\n\n        /**\n         * Is called to check whether the entered value is valid for this ParameterInput\n         */\n        isValid(): boolean {\n            return this.validateFct(this.getValue());\n        }\n\n        /**\n         * Is called to get the current value\n         */\n        abstract getValue(): any\n    }\n\n    /**\n     * Defines the constructor of a ParameterInput\n     */\n    export interface ParameterInputClass {\n        new(currentValue: any, validateFct: (value: any) => boolean): ParameterInput\n    }\n\n    /**\n     * A ParameterInput for strings\n     */\n    class StringParameterInput extends ParameterInput {\n\n        constructor(currentValue: any, validateFct?: (value: any) => boolean) {\n            super($('<input type=\"text\">'), validateFct);\n            this.ui.val(currentValue);\n        }\n\n        getValue(): any {\n            return this.ui.val();\n        }\n    }\n\n    class MultiLineStringInput extends ParameterInput {\n        constructor(currentValue: any, validateFct?: (value: any) => boolean) {\n            super($('<textarea rows=\"4\" cols=\"50\"></textarea>'), validateFct);\n            this.ui.val(currentValue);\n            //Prevent Enter from closing the dialog unless shift is pressed\n            this.ui.on(\"keydown\", (event) => {\n                if (event.keyCode == 13 && !event.shiftKey)\n                    event.stopPropagation();\n            });\n        }\n\n        getValue() {\n            return this.ui.val();\n        }\n    };\n\n    class ColorParameterInput extends StringParameterInput {\n        initInput() {\n            this.ui.spectrum(\n                {\n                    color: this.getValue(),\n                    preferredFormat: \"hex\"\n                });\n        }\n\n        isValid() {\n            return RGBCOLOR_REGEX.test(this.getValue()) && super.isValid();\n        }\n    }\n\n    /**\n     * A ParameterInput for rational numbers\n     */\n    class NumberParameterInput extends StringParameterInput {\n        isValid() {\n            return !isNaN(this.getValue()) && super.isValid();\n        }\n\n        getValue() {\n            return parseFloat(this.ui.val());\n        }\n    }\n\n    /**\n     * A integer ParameterInput\n     */\n    class IntegerParameterInput extends StringParameterInput {\n        isValid() {\n            const val = this.ui.val();\n            return val == parseInt(val) && super.isValid();\n        }\n\n        getValue() {\n            return parseInt(this.ui.val());\n        }\n    }\n\n    export const INPUT_TYPES = {\n        \"string\": StringParameterInput,\n        \"multilinestring\": MultiLineStringInput,\n        \"color\": ColorParameterInput,\n        \"number\": NumberParameterInput,\n        \"integer\": IntegerParameterInput\n    };\n}\n"]}