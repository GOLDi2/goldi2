{"version":3,"file":"ParameterDialog.js","sourceRoot":"","sources":["ParameterDialog.ts"],"names":[],"mappings":"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","sourcesContent":["import ParameterInputClass = workspace.ParameterInputClass;\n/**\n * Created by maximilian on 12.05.17.\n */\n\n\n/**\n * Provides a dialog to set the parameters for a Device\n */\nclass ParameterDialog extends Dialog\n{\n    protected parameterDescriptions : Array<SimcirParamDescription>;\n    protected values : object;\n    protected SetValuesCallback : (newValues : object) => void;\n    protected inputs : Array<workspace.ParameterInput>;\n    protected rows : Array<JQuery>;\n    \n    /**\n     *\n     * @param parameterDescriptions - Descriptions of the parameters to be editable in the dialog.\n     * @param values - A object that provides the current values of the parameter\n     * @param SetValuesCallback - Is called to apply the new values\n     */\n    constructor(parameterDescriptions : Array<SimcirParamDescription>, values : object, SetValuesCallback : (newValues : object) => void)\n        {\n            super({modal : true, show : false, hide : false});\n            this.parameterDescriptions = parameterDescriptions;\n            this.SetValuesCallback     = SetValuesCallback;\n            this.values                = values;\n        }\n    \n    /**\n     * get the dialog title\n     * @returns {string} - the dialog title\n     */\n    protected getTitle() : string\n        {\n            return 'Editing Parameters';\n        }\n    \n    protected getContent() : JQuery\n        {\n            this.inputs = [];\n            this.rows   = [];\n            const table = $('<table></table>');\n            \n            for (let paramDesc of this.parameterDescriptions)\n            {\n                const inputClass : ParameterInputClass = workspace.INPUT_TYPES[paramDesc.type];\n                const input                            = new inputClass(this.values[paramDesc.name] || paramDesc.defaultValue, paramDesc.validateFct);\n                \n                const row : JQuery = $('<tr></tr>');\n                row.append($('<td></td>')\n                               .text((paramDesc.displayName || paramDesc.name) + ':')\n                               .attr('title', paramDesc.description));\n                row.append($('<td></td>')\n                               .append(input.ui)\n                               .attr('title', paramDesc.description));\n                row.append($('<td></td>')\n                               .text(paramDesc.unit)\n                               .attr('title', paramDesc.description));\n                table.append(row);\n                input.initInput();\n                this.inputs.push(input);\n                this.rows.push(row);\n            }\n            this.addButton('Apply', 'glyphicon glyphicon-ok', () => this.apply());\n            \n            this.registerKeyListener((key) =>\n                                     {\n                                         if (key == 13)\n                                         { // enter\n                                             this.simulateButtonClick('Apply');\n                                         }\n                                     });\n            \n            return table;\n        }\n    \n    /**\n     * Validates the state of all the inputs in the dialog and marks invalid inputs\n     * @returns {boolean} - Flag to indicate whether all values are valid\n     */\n    protected validate() : boolean\n        {\n            let isValid : boolean = true;\n            for (let i in this.rows)\n            {\n                const valid = this.inputs[i].isValid();\n                this.rows[i].toggleClass('beast-parameter-invalid', !valid);\n                isValid = valid && isValid;\n            }\n            return isValid;\n        }\n    \n    /**\n     * Applies the modified values when they are valid and closes the dialog\n     */\n    apply()\n        {\n            if (this.validate())\n            {\n                const newValues = {};\n                for (let i in this.inputs)\n                {\n                    newValues[this.parameterDescriptions[i].name] = this.inputs[i].getValue();\n                }\n                this.SetValuesCallback(newValues);\n                this.close();\n            }\n        }\n}"]}