{"version":3,"file":"SimulationInterface.js","sourceRoot":"","sources":["SimulationInterface.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by maximilian on 13.06.17.\n */\n    \n    /// <reference path=\"main.ts\" />\n\nnamespace Workspace {\n    \n    \n\n    export class SimulationInterface {\n        protected isActive: boolean = false;\n        protected  inports: {[name: string]: SimcirPort};\n        protected outports: {[name: string]: SimcirPort};\n        protected handlers: Array<(name: string, value: boolean) => (void)> = [];\n        \n        constructor( protected workspace: SimcirWorkspace) {\n            this.updatePorts();\n        }\n        \n         changeHandler = (event) => {\n             let port = <SimcirPort>event.data;\n             for (let handler of this.handlers)\n                 handler(port.deviceDef.label, port.getInputs()[0].getValue() != null);\n        }\n        \n        protected setExternalManipulation(value){\n            for (let name in this.inports)\n                this.inports[name].setExternalManipulation(value);\n            for (let name in this.outports)\n                this.outports[name].setExternalManipulation(value);\n        }\n        \n        activate() {\n            this.updatePorts();\n            for (let name in this.outports)\n                this.outports[name].$ui.on(\"inputValueChange\", this.outports[name], this.changeHandler);\n            this.setExternalManipulation(true);\n            this.isActive = true;\n        }\n        \n        deactivate() {\n            for (let name in this.outports)\n                this.outports[name].$ui.off(\"inputValueChange\", this.changeHandler);\n            this.setExternalManipulation(false);\n            this.isActive = false;\n        }\n\n        public get paused(): boolean { return this.workspace.eventQueue.paused }\n        public set paused(val: boolean) {\n            this.workspace.eventQueue.paused = val;\n            this.workspace.setPauseTimers(val);\n        }\n        \n        setInput(name: string, value: boolean) {\n            if (this.isActive)\n                this.inports[name].setManipulationValue(value ? 1 : null)\n        }\n        \n        setInputs(values: {[name: string]: boolean}) {\n            for (let name in values)\n                this.setInput(name, values[name]);\n        }\n        \n        getOutputs(): {[name: string]: boolean} {\n            const values = {};\n            for (let name in this.outports)\n                values[name] = this.outports[name].getInputs()[0].getValue() != null;\n            return values;\n        }\n        \n        onOutputChange(handler: (name: string, value: boolean) => (void)) {\n            this.handlers.push(handler)\n        }\n    \n        offOutputChange(handler: (name: string, value: boolean) => (void)) {\n            this.handlers = this.handlers.filter(h => h !== handler);\n        }\n\n        transferCallbacks(newSI: SimulationInterface) {\n            newSI.onOutputChange((name: string, value: boolean) => {\n                for (let handler of this.handlers)\n                    handler(name, value);\n            });\n        }\n\n        postLateCallback(callback: () => (void)) {\n            this.workspace.eventQueue.postLateCallback(callback);\n        }\n        \n        protected updatePorts(){\n            let ports = this.workspace.getPorts();\n            this.inports = {};\n            for (let port of ports.inports)\n                this.inports[port.deviceDef.label] = port\n            this.outports = {};\n            for (let port of ports.outports)\n                this.outports[port.deviceDef.label] = port\n        }\n        \n        protected getNames(ports: {[name: string]: SimcirPort}): Array<string> {\n            return Object.keys(ports);\n        }\n        \n        getInputNames() {this.updatePorts(); return this.getNames(this.inports)};\n        getOutputNames() {this.updatePorts(); return this.getNames(this.outports)};\n        \n    }\n}"]}