{"version":3,"file":"GridBuilder.js","sourceRoot":"","sources":["GridBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["class Grid {\r\n    inputs: number;\r\n    outputs: number;\r\n    columns: number;\r\n    fixedAnd: boolean;\r\n    fixedOr: boolean;\r\n    lineDistance: number = 25;\r\n    sectionBorder: number = this.lineDistance / 2;\r\n    inputLineDist: number = 10;\r\n    inputLines: { high: GridLine, low: GridLine, inLine: GridLine }[] = [];\r\n    inputNodes: { high: GridNode[], low: GridNode[] }[] = [];\r\n    verticalLines: GridLine[] = [];\r\n    outputLines: GridLine[] = [];\r\n    outputNodes: GridNode[][];\r\n    inputPosition: number[] = [];\r\n    outputPosition: number[] = [];\r\n    outputLinks: string[] = [];\r\n    inputLinks: string[] = [];\r\n\r\n    constructor(numInputs: number, numColumns: number, numOutputs: number, fixedAnd: boolean, fixedOr: boolean) {\r\n        this.inputs = numInputs;\r\n        this.outputs = numOutputs;\r\n        this.columns = numColumns;\r\n        this.fixedAnd = fixedAnd;\r\n        this.fixedOr = fixedOr;\r\n    }\r\n\r\n    setParams(inputs: number, outputs: number, columns: number = this.columns) {\r\n        this.inputs = inputs;\r\n        this.outputs = outputs;\r\n        this.columns = columns;\r\n    }\r\n\r\n    getSize() {\r\n        const inputSpace = {\r\n            width: (this.columns - 1) * this.lineDistance + this.sectionBorder * 2,\r\n            height: (this.inputs - 1) * this.lineDistance + this.inputLineDist + this.sectionBorder * 2\r\n        };\r\n        const outputSpace = {\r\n            width: inputSpace.width,\r\n            height: (this.outputs - 1) * this.lineDistance + this.sectionBorder * 2\r\n        };\r\n        const border = {\r\n            top: 15,\r\n            left: 30,\r\n            right: 30,\r\n            bottom: 15\r\n        };\r\n        return {\r\n            height: inputSpace.height + outputSpace.height + this.sectionBorder + border.top + border.bottom,\r\n            width: inputSpace.width + border.left + border.right,\r\n            border: border,\r\n            inputSpace: inputSpace,\r\n            outputSpace: outputSpace\r\n        }\r\n    }\r\n\r\n    changeANDGrid(x: number, y: number, highActive: boolean) {\r\n        if (highActive) {\r\n            this.inputNodes[x].high[y].switchLink();\r\n        }\r\n        else {\r\n            this.inputNodes[x].low[y].switchLink();\r\n        }\r\n    }\r\n\r\n    changeORGrid(x: number, y: number) {\r\n        this.outputNodes[x][y].switchLink();\r\n    }\r\n\r\n    getInputPositions(): number[] {\r\n        return this.inputPosition;\r\n    }\r\n\r\n    getOutputPositions(): number[] {\r\n        return this.outputPosition;\r\n    }\r\n\r\n    getInputLinks(): string[] {\r\n        return this.inputLinks;\r\n    }\r\n\r\n    setInputLinks(inputs: string[]) {\r\n        inputs.forEach((line, x) => {\r\n            line = this.padEnd(line, this.columns, '-');\r\n            const inputLine = this.inputNodes[this.inputs - x - 1];\r\n            if (inputLine) {\r\n                for (let i = 0; i < this.columns; ++i) {\r\n                    const tvl = line.charAt(i);\r\n                    inputLine.low[i].setLink(tvl == '0');\r\n                    inputLine.high[i].setLink(tvl == '1');\r\n                }\r\n            }\r\n            this.inputLinks[x] = line;\r\n        });\r\n    }\r\n\r\n    getOutputLinks(): string[] {\r\n        this.outputNodes.reverse().forEach((line, x) => {\r\n            let lineStr = this.outputLinks[x] || '';\r\n            line.reverse().forEach((node, y) => {\r\n                lineStr = this.replaceAt(lineStr, y, node.isLinked() ? '1' : '0');\r\n            });\r\n            this.outputLinks[x] = lineStr;\r\n            line.reverse();\r\n        });\r\n        this.outputNodes.reverse();\r\n        return this.outputLinks.slice();\r\n    }\r\n\r\n    setOutputLinks(outputs: string[]) {\r\n        outputs.forEach((numb, x) => {\r\n            const outputLine = this.outputNodes[this.outputs - x - 1];\r\n            if (outputLine) {\r\n                for (let i = 0; i < this.columns; ++i) {\r\n                    const node = outputLine[this.columns - i - 1];\r\n                    if (node) {\r\n                        node.setLink(numb.charAt(i) == '1');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this.outputLinks = outputs;\r\n    }\r\n\r\n    insertAt(str, index, insertStr) {\r\n        return str.substr(0, index) + insertStr + str.substr(index);\r\n    }\r\n\r\n    replaceAt(str, index, replacement) {\r\n        return str.substr(0, index) + replacement + str.substr(index + replacement.length);\r\n    };\r\n\r\n    padEnd(str, length, padStr) {\r\n        while (str.length < length)\r\n            str += padStr;\r\n        return str;\r\n    }\r\n\r\n    drawNodes(svg: SVGGraphics.SVGGraphics, lines: number, fixed: boolean, nodeCbk: (linked: boolean, x: number, y: number) => void, x: number = 0, y: number = 0): GridNode[][] {\r\n        const nodes: GridNode[][] = [];\r\n        for (let i = 1; i <= lines; ++i) {\r\n            nodes[i - 1] = [];\r\n            for (let p = 1; p <= this.columns; ++p) {\r\n                const circle = svg.drawCircle(x + p * this.lineDistance, y + i * this.lineDistance, 4);\r\n                let styleCbk: (linked: boolean) => {};\r\n                if (fixed) {\r\n                    circle.css({'pointer-events': 'none', stroke: '#000000', 'stroke-width': 1.5, fill: 'none'});\r\n                    styleCbk = (linked) => {\r\n                        //TODO use opacity and fix bug\r\n                        return {stroke: linked ? '#000000' : 'none'}\r\n                    };\r\n                }\r\n                else {\r\n                    circle.css({'pointer-events': 'all', cursor: 'pointer', stroke: 'none', fill: '#000000'});\r\n                    styleCbk = (linked) => {\r\n                        return {'fill-opacity': linked ? 1 : 0}\r\n                    };\r\n                }\r\n                const node = new GridNode(circle, false, styleCbk, (linked) => nodeCbk(linked, i - 1, p - 1));\r\n                circle.on('click', () => node.switchLink());\r\n                nodes[i - 1].push(node);\r\n            }\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    drawLines(svg: SVGGraphics.SVGGraphics, lines: number, posFct: (i: number) => { x1: number, y1: number, x2: number, y2: number }, valueFct: (line: GridLine, idx: number) => void = null): void {\r\n        for (let i = 0; i < lines; ++i) {\r\n            const pos = posFct(i);\r\n            svg.moveTo(pos.x1, pos.y1);\r\n            svg.lineTo(pos.x2, pos.y2);\r\n            const path = svg.closePath(true);\r\n            path.css('stroke-width', 1.5);\r\n            valueFct(new GridLine(path), i);\r\n        }\r\n        //TODO Lines umgedreht -> überall anwenden\r\n    }\r\n\r\n    drawGrid(target: JQuery, x: number = 0, y: number = 0) {\r\n        let svg = this.getChildSVG(target, 'grid-sections');\r\n        const size = this.getSize();\r\n        this.drawSection(svg, size.border.left, size.border.top, size.width - size.border.right, size.border.top + size.inputSpace.height);\r\n        const outputStart = size.border.top + size.inputSpace.height + this.sectionBorder;\r\n        this.drawSection(svg, size.border.left, outputStart, size.width - size.border.right, outputStart + size.outputSpace.height);\r\n        //draw verticalLines\r\n        svg = this.getChildSVG(target, 'grid-vertical');\r\n        this.verticalLines = [];\r\n        this.drawLines(svg, this.columns, (i) => {\r\n            const x = size.border.left + this.sectionBorder + i * this.lineDistance;\r\n            return {y1: size.border.top, y2: size.height - size.border.bottom, x1: x, x2: x};\r\n        }, (value, idx) => {\r\n            this.verticalLines[idx] = value;\r\n        });\r\n        //draw highInput\r\n        svg = this.getChildSVG(target, 'grid-input');\r\n        const xLowStart = [];\r\n        this.drawLines(svg, this.inputs, (i) => {\r\n            const y = i * this.lineDistance + size.border.top + this.sectionBorder;\r\n            const yTri = y + this.inputLineDist / 2;\r\n            const textSize = 12;\r\n            const xText = textSize / 2 - 1;\r\n            const yText = yTri - textSize / 3;\r\n            svg.drawText(xText, yText, textSize, 'x' + (this.inputs - 1 - i));\r\n            const xStart = this.drawInputTriangle(svg, size.border.left - 10, yTri);\r\n            xLowStart.push(xStart.low);\r\n            this.inputPosition[i] = yTri;\r\n            return {y1: y, y2: y, x1: xStart.high, x2: size.width - size.border.right}\r\n        }, (value, idx) => this.inputLines[idx] = {high: value, low: null, inLine: null});\r\n        this.drawLines(svg, this.inputs, (i) => {\r\n            return {y1: this.inputPosition[i], y2: this.inputPosition[i], x1: 0, x2: size.border.left - 10}\r\n        }, (value, idx) => this.inputLines[idx].inLine = value);\r\n        //draw lowInput\r\n        this.drawLines(svg, this.inputs, (i) => {\r\n            const y = i * this.lineDistance + this.inputLineDist + size.border.top + this.sectionBorder;\r\n            return {y1: y, y2: y, x1: xLowStart[i], x2: size.width - size.border.right}\r\n        }, (value, idx) => this.inputLines[idx].low = value);\r\n        //triangle back to front\r\n        svg.getTarget().children('.inputTriangle').appendTo(svg.getTarget());\r\n        //draw highNodes\r\n        this.inputLinks = new Array(this.inputs).fill('-'.repeat(this.columns));\r\n        const highNodes = this.drawNodes(svg, this.inputs, this.fixedAnd, (linked, x, y) => {\r\n            const idx = this.inputs - x - 1\r\n            if (linked) {\r\n                this.inputNodes[x].low[y].setLink(false);\r\n                this.inputLinks[idx] = this.replaceAt(this.inputLinks[idx], y, '1');\r\n            }\r\n            else {\r\n                this.inputLinks[idx] = this.replaceAt(this.inputLinks[idx], y, '-');\r\n            }\r\n            target.trigger('inputValueChange', true);\r\n        }, size.border.left - this.sectionBorder, size.border.top - this.sectionBorder);\r\n        //draw lowNodes\r\n        const lowNodes = this.drawNodes(svg, this.inputs, this.fixedAnd, (linked, x, y) => {\r\n            const idx = this.inputs - x - 1;\r\n            if (linked) {\r\n                this.inputNodes[x].high[y].setLink(false);\r\n                this.inputLinks[idx] = this.replaceAt(this.inputLinks[idx], y, '0');\r\n            }\r\n            else {\r\n                this.inputLinks[idx] = this.replaceAt(this.inputLinks[idx], y, '-');\r\n            }\r\n            target.trigger('inputValueChange', true);\r\n        }, size.border.left - this.sectionBorder, size.border.top - this.sectionBorder + this.inputLineDist);\r\n        lowNodes.forEach((value, idx) => {\r\n            this.inputNodes[idx] = {high: highNodes[idx], low: lowNodes[idx]}\r\n        });\r\n        //draw output\r\n        svg = this.getChildSVG(target, 'grid-output');\r\n        this.drawLines(svg, this.outputs, (i) => {\r\n            const y = i * this.lineDistance + outputStart + this.sectionBorder;\r\n            this.outputPosition[i] = y;\r\n            const textSize = 12;\r\n            const text = 'y' + (this.outputs - 1 - i);\r\n            const xText = size.width - 3 - textSize * 3 / 2;\r\n            const yText = y - textSize / 3;\r\n            svg.drawText(xText, yText, textSize, text);\r\n            return {y1: y, y2: y, x1: size.border.left, x2: size.width}\r\n        }, (value, idx) => this.outputLines[idx] = value);\r\n        this.outputNodes = this.drawNodes(svg, this.outputs, this.fixedOr, () => target.trigger('inputValueChange', true), size.border.left - this.sectionBorder, outputStart - this.sectionBorder);\r\n    }\r\n\r\n    drawSection(svg: SVGGraphics.SVGGraphics, x: number, y: number, x2: number, y2: number) {\r\n        const ele: JQuery = svg.drawRect(x, y, x2 - x, y2 - y);\r\n        ele.css({\r\n            fill: '#ffffff',\r\n            'stroke-linejoin': 'round',\r\n            stroke: '#000000',\r\n            'stroke-dasharray': '5 4',\r\n            'stroke-width': 1\r\n        });\r\n    }\r\n\r\n    drawInputTriangle(svg: SVGGraphics.SVGGraphics, xOffset: number, yOffset: number): { high: number, low: number } {\r\n        const triWidth = 1.5;\r\n        const circleWidth = 0.5;\r\n        const r = 1.5;\r\n        const x = 9;\r\n        const y = 7;\r\n        const dy = y - this.inputLineDist / 2;\r\n        const dx = dy * x / y;\r\n        const alpha = Math.PI / 2 - Math.atan2(dx, dy);\r\n        const xCircle2 = xOffset + dx + (r + triWidth / 2 + circleWidth / 2) / Math.sin(alpha);\r\n        svg.drawCircle(xCircle2, yOffset + this.inputLineDist / 2, r).css({\r\n            'stroke': '#000000',\r\n            'stroke-width': circleWidth\r\n        }).addClass('inputTriangle');\r\n        svg.addPoint(xOffset, yOffset - y);\r\n        svg.addPoint(xOffset + x, yOffset);\r\n        svg.addPoint(xOffset, yOffset + y);\r\n        svg.closePolygon().css({'stroke': '#000000', 'stroke-width': triWidth}).addClass('inputTriangle');\r\n        const xHigh = xOffset + dx;\r\n        return {high: xHigh, low: xCircle2};\r\n    }\r\n\r\n    protected getChildSVG(target: JQuery, clazz: string): SVGGraphics.SVGGraphics {\r\n        const group = SVGGraphics.createSVGElement('g').addClass(clazz);\r\n        target.append(group);\r\n        return new SVGGraphics.SVGGraphics(group);\r\n    }\r\n\r\n    computeInput(inputs: boolean[]): boolean[] {\r\n\r\n        this.inputLines.forEach((value, idx) => {\r\n            value.high.setState(inputs[idx]);\r\n            value.inLine.setState(inputs[idx]);\r\n            value.low.setState(!inputs[idx])\r\n        });\r\n\r\n        this.inputLines = this.inputLines.reverse();\r\n\r\n        const output = [];\r\n        this.verticalLines.forEach((line, idx) => {\r\n            let state = true;\r\n            if (this.inputLinks.every(l => l.charAt(idx) === \"-\")) {\r\n                state = false;\r\n            } else {\r\n                for (let x = 0; x < this.inputs; ++x) {\r\n                    const char = this.inputLinks[x].charAt(idx);\r\n                    if (!(char == '-' || char == (inputs[x] ? '1' : '0'))) {\r\n                        state = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            line.setState(state);\r\n            this.outputNodes.forEach((nodes, index) => {\r\n                if (state && nodes[idx].isLinked()) {\r\n                    output[index] = state;\r\n                }\r\n            })\r\n        });\r\n        for (let i = 0; i < this.outputs; ++i) {\r\n            this.outputLines[i].setState(output[i]);\r\n        }\r\n        return output;\r\n    }\r\n}\r\n\r\nclass GridNode {\r\n    ui: JQuery;\r\n    linked: boolean;\r\n    styleCbk: (linked: boolean) => {};\r\n    fctCbk: (linked: boolean) => void;\r\n\r\n    constructor(ui: JQuery, state: boolean, styleCbk: (linked: boolean) => {}, fctCbk: (linked: boolean) => void) {\r\n        this.ui = ui;\r\n        this.styleCbk = styleCbk;\r\n        this.fctCbk = fctCbk;\r\n        this.linked = state;\r\n        this.update();\r\n    }\r\n\r\n    switchLink(): boolean {\r\n        this.setLink(!this.linked);\r\n        return this.linked;\r\n    }\r\n\r\n    setLink(link: boolean) {\r\n        this.linked = link;\r\n        this.update();\r\n        this.fctCbk(this.linked);\r\n    }\r\n\r\n    isLinked(): boolean {\r\n        return this.linked;\r\n    }\r\n\r\n    update() {\r\n        this.ui.css(this.styleCbk(this.linked));\r\n    }\r\n}\r\n\r\nclass GridLine {\r\n    ui: JQuery;\r\n\r\n    constructor(ui: JQuery) {\r\n        this.ui = ui;\r\n        this.setState(false);\r\n    }\r\n\r\n    setState(state: boolean) {\r\n        this.ui.css({stroke: state ? '#ff0000' : '#000000'});\r\n    }\r\n}\r\n\r\nclass ROM extends Grid {\r\n    constructor(inputs: number, outputs: number) {\r\n        super(inputs, Math.pow(2, inputs), outputs, true, false);\r\n    }\r\n\r\n    drawGrid(target: JQuery) {\r\n        super.drawGrid(target, 0, 0);\r\n        const svg = this.getChildSVG(target, 'grid-kIndex');\r\n        const size = this.getSize();\r\n        const textSize = 10;\r\n        for (let i = 0; i < this.columns; ++i) {\r\n            for (let b = 0; b < this.inputs; ++b) {\r\n                this.changeANDGrid(this.inputs - 1 - b, this.columns - 1 - i, ((i >> b) & 1) == 1);\r\n            }\r\n            const idx = i + 1;\r\n            const yOffset = size.height - size.border.bottom / 2 + textSize / 2;\r\n            svg.drawText(size.border.left - this.sectionBorder + idx * this.lineDistance - textSize / 2, yOffset, textSize, \"k\" + (this.columns - idx));\r\n        }\r\n    }\r\n\r\n    setParams(inputs: number, outputs: number) {\r\n        super.setParams(inputs, outputs, Math.pow(2, inputs));\r\n    }\r\n}\r\n\r\nclass PLA extends Grid {\r\n    constructor(inputs: number, outputs: number, columns: number) {\r\n        super(inputs, columns, outputs, false, false);\r\n    }\r\n\r\n    drawGrid(target: JQuery) {\r\n        super.drawGrid(target, 0, 0);\r\n    }\r\n}\r\n\r\nclass GAL extends Grid {\r\n\r\n    private linksPerOutput: number;\r\n    private galLinks: string[];\r\n\r\n    constructor(inputs: number, outputs: number, linksPerOutput: number) {\r\n        super(inputs, outputs * linksPerOutput, outputs, false, true);\r\n        this.linksPerOutput = linksPerOutput;\r\n        this.galLinks = [];\r\n    }\r\n\r\n    drawGrid(target: JQuery) {\r\n        super.drawGrid(target, 0, 0);\r\n        let column = 0;\r\n        for (let row = 0; row < this.outputs; ++row) {\r\n            const end = column + this.linksPerOutput;\r\n            for (; column < end; ++column) {\r\n                this.changeORGrid(row, column);\r\n            }\r\n        }\r\n    }\r\n\r\n    setInputLinks(links: string[]) {\r\n        const legacy = [];\r\n        links.forEach((line, idx) => {\r\n            let legLine = '';\r\n            const blocks = line.split('|');\r\n            blocks.forEach((block) => {\r\n                for (let i = 0; i < this.linksPerOutput; ++i) {\r\n                    legLine += block.charAt(i) || '-';\r\n                }\r\n            });\r\n            legacy[idx] = legLine;\r\n        });\r\n        this.galLinks = links;\r\n        super.setInputLinks(legacy);\r\n        console.log(legacy);\r\n    }\r\n\r\n    getInputLinks(): string[] {\r\n        //Save format\r\n        //00-|--1|00-|1-0\r\n        //11|-1|01|00\r\n        const legacy = super.getInputLinks();\r\n        const save = [];\r\n        legacy.forEach((line, idx) => {\r\n                const split = (this.galLinks[idx] || '').split('|');\r\n                const blocks = this.columns / this.linksPerOutput;\r\n                for (let blockIdx = 0; blockIdx < blocks; ++blockIdx) {\r\n                    const startBlock = blockIdx * this.linksPerOutput;\r\n                    for (let i = 0; i < this.linksPerOutput; ++i) {\r\n                        const str = split[blockIdx] || '';\r\n                        split[blockIdx] = this.replaceAt(str, i, line.charAt(startBlock + i));\r\n                    }\r\n                }\r\n                save[idx] = split.join('|');\r\n                console.log(idx, save[idx] + \" // \" + line);\r\n            }\r\n        );\r\n        return save.concat(this.galLinks.slice(save.length));\r\n    }\r\n\r\n    setParams(inputs: number, outputs: number, linksPerOutput: number) {\r\n        this.linksPerOutput = linksPerOutput;\r\n        super.setParams(inputs, outputs, linksPerOutput * outputs);\r\n    }\r\n}"]}