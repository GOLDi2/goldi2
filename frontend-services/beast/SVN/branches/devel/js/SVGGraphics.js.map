{"version":3,"file":"SVGGraphics.js","sourceRoot":"","sources":["SVGGraphics.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Created by maximilian on 12.05.17.\n */\n\nnamespace SVGGraphics{\n    const attrX = 'simcir-transform-x';\n    const attrY = 'simcir-transform-y';\n    const attrRotate = 'simcir-transform-rotate';\n    const attrZoom = 'simcir-transform-zoom';\n    \n    /**\n     * Creates a DOM Element in the DOM namespace\n     * @param tagName\n     * @returns {JQuery}\n     */\n    export function createSVGElement(tagName: string) : JQuery {\n        return $(document.createElementNS(\n            'http://www.w3.org/2000/svg', tagName) );\n    };\n    \n    /**\n     * Creates a SVG Element\n     * @param width - Width of the element - set to 100% if not given\n     * @param height - Height of the element - set to 100% if not given\n     * @returns {JQuery}\n     */\n    export function createSVG(width?: number, height?: number): JQuery {\n        if (width === undefined || height === undefined)\n            return createSVGElement('svg').attr({\n                version: '1.1', width: \"100%\", height: \"100%\",\n            });\n        return createSVGElement('svg').attr({\n            version: '1.1',\n            width: width, height: height,\n            viewBox: '0 0 ' + width + ' ' + height\n        });\n    };\n    \n    export interface Transformation{\n        x: number,\n        y:  number,\n        rotate: number,\n        zoom: number,\n    }\n    \n    /**\n     * Gets the current transformation parameters of the given element\n     * @param $o\n     */\n    export function transform($o: JQuery): Transformation;\n    /**\n     * Applies transformations to a SVG object\n     * @param $o - element to apply transformations to\n     * @param x\n     * @param y\n     * @param rotate - rotation in degree - negative numbers mean left\n     * @param zoom - zoom factor\n     */\n    export function transform($o: JQuery, x?: number, y?: number, rotate?:number, zoom?:number): void;\n    export function transform($o: JQuery, x?: number, y?: number, rotate?:number, zoom?:number) {\n        const getNumber = function($o: JQuery, k:string) {\n            var v = $o.attr(k);\n            return v? +v : 0;\n        };\n    \n        if (arguments.length >= 3) {\n            var transform = 'translate(' + x + ' ' + y + ')';\n            if (rotate) {\n                transform += ' rotate(' + rotate + ')';\n            }\n            if (zoom) {\n                transform += ' scale(' + zoom + ')';\n            }\n            $o.attr('transform', transform);\n            $o.attr(attrX, x);\n            $o.attr(attrY, y);\n            $o.attr(attrRotate, rotate);\n            $o.attr(attrZoom, zoom);\n            $o.trigger(\"tansformed\");\n        } else if (arguments.length == 1) {\n            return {x: getNumber($o, attrX), y: getNumber($o, attrY),\n                rotate: getNumber($o, attrRotate), zoom: getNumber($o, attrZoom) || 1};\n        }\n    };\n    \n    /**\n     * Class for manipulating jQuery SVG Objects, esp. creating paths\n     */\n    export class SVGGraphics {\n        attr = {};\n        protected buf: string = '';\n        protected target: JQuery;\n        \n        constructor(target: JQuery) {\n            this.target = target;\n        }\n        \n        moveTo(x: number, y: number) {\n            this.buf += ' M ' + x + ' ' + y;\n        };\n        \n        lineTo(x: number, y: number) {\n            this.buf += ' L ' + x + ' ' + y;\n        };\n        curveTo(x1: number, y1: number, x: number, y: number) {\n            this.buf += ' Q ' + x1 + ' ' + y1 + ' ' + x + ' ' + y;\n        };\n        closePath(close?: boolean) {\n            if (close) {\n                // really close path.\n                this.buf += ' Z';\n            }\n            this.target.append(createSVGElement('path').\n                                                   attr('d', this.buf).attr(this.attr) );\n            this.buf = '';\n        };\n        drawRect(x: number, y: number, width, height) {\n            this.target.append(createSVGElement('rect').\n                                                   attr({x: x, y: y, width: width, height: height}).attr(this.attr) );\n        };\n        drawCircle(x: number, y: number, r: number) {\n            this.target.append(createSVGElement('circle').\n                                                     attr({cx: x, cy: y, r: r}).attr(this.attr) );\n        };\n        drawText(x: number, y: number, size: number, text: string) {\n            this.target.append(createSVGElement('text').attr(this.attr).addClass(\"simcir-device-text\").\n                                                         attr({x: x, y: y}).css('font-size', size).text(text) );\n        };\n    };\n};"]}